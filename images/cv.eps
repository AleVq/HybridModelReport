%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 541.000000 256.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Version 10.12.5 (assemblage 16F73) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 541 256
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 541 256
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: HelveticaNeue
%!FontType1-1.0: HelveticaNeue 1.0000.1.0000
14 dict begin/FontName /HelveticaNeue def
/PaintType 0 def
/Encoding 256 array 0 1 255{1 index exch/.notdef put}for
dup 33 /zero put
dup 34 /one put
dup 35 /four put
dup 36 /seven put
dup 37 /three put
dup 38 /two put
dup 39 /eight put
dup 40 /T put
dup 41 /e put
dup 42 /s put
dup 43 /t put
dup 44 /space put
dup 45 /r put
dup 46 /a put
dup 47 /i put
dup 48 /n put
dup 49 /g put
dup 50 /hyphen put
dup 51 /f put
dup 52 /o put
dup 53 /l put
dup 54 /d put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[1000 -951 1 index div -481 2 index div 1987 3 index div 1077 5 -1 roll div]cvx def
/sfnts [<




1610B8002AD0B8002A2FBA002B00220015111239B8001610B8002CD000B800152FBA000F002700032BB8000F10BA001D000500032BB8001D10303137343E0233321E0215140E0223222E0205112311232E0323220E0215141E023332363733157E10243C2B2C3E271211263C2B293D2713019055020E292E2E143B593B1D1E3B593C365A1502FE264838222136472624463722203645DA02CAFEF6171F13082B49623737624A2C262B46000000020024FFF502030211000A0026005BBA0014001F00032BB8001410BA0015000000032BB8001510B8001410B80001D0B8000010B8000CD0B8000C2F00BA000F002400032BB8000F10BA001A000600032BB8001A10BA0001001400032BB8000110B8002410B8000CDC303101213E0333321E0217230E0123222E023721362E0223220E02151E0333323601A7FED702162635212035271754540B45362A3E28120101830215375B4535594124021F3E5B3E587401341E352817172736AE33321C2F3D222F6858392848623B3B644828580001000C0000012902D20017004FBA0003000000032BB8000310B80006D0B8000010B8000DDCB8000010B80014D000B800012FBA0011000A00032BB8001110BA0015000000032BB8001510B8000010B80003D0B8001510B80005D030311311331133352335343633321617352E012322061D01231563556464221F0B1A0B0C1F0C46495701BAFE4601BA4B48221803044A0404413F4D4B0000020024FF2F01FE02110028003C00BDBA002E000C00032BB8002E10BA0001000200032BB8000110B8000210B80038D0B800382FBA000400020038111239B8000210B80015D0411B0006002E0016002E0026002E0036002E0046002E0056002E0066002E0076002E0086002E0096002E00A6002E00B6002E00C6002E000D5D410500D5002E00E5002E00025DBA0021000C002E111239B800212FB80020DCB8000110B8003EDC00BA001B002600032BB8001B10BA0007003300032BB8000710BA0029001100032BB8002910303125112315232E0123220E0215141E02333236373315140E0223222E0227231E0333323627222E0235343E0233321E0215140E0201FE5001175231435C38181D3A563A3259160211263A2A152E271B015502283D4B247C74EE2A38220E11253A292838231011243B2C01D94A2B2B334F612E355F472A2D30222B48331D091420172A3A24107E98233946232544341F203542222448392300000200450000009A02CA00030007002FBA0001000200032BB8000110B8000210B80004D0B8000110B80006D000B800052FBA0001000000032BB800011030311335231D011133119A5555026268685DFDFB020500000100450000009A02CA00030017BA0003000000032BB800031000B800012FB800002F303113113311455502CAFD3602CA000000


00>] def
/CharStrings 24 dict dup begin
/.notdef 0 def
/space 1 def
/hyphen 2 def
/zero 3 def
/one 4 def
/two 5 def
/three 6 def
/four 7 def
/seven 8 def
/eight 9 def
/T 10 def
/a 11 def
/d 12 def
/e 13 def
/f 14 def
/g 15 def
/i 16 def
/l 17 def
/n 18 def
/o 19 def
/r 20 def
/s 21 def
/t 22 def
/uni2B91 23 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontType 1 def
/FontMatrix [ 0.001 0 0 0.001 0 0 ] def
/FontBBox{-951 -481 1987 1077}def
/UniqueID 4243299 def
currentdict currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA5567765E71F2B911B3C5586B741EEB93F3C73016EC16BFF283758900903D203992EFC8BAFAF13579C602F38C9266A63CD4C2DA03F4BF340963A027151A3FDA461900D733520630E1DE7C831E4FD8BFC3BD33F746B2D974C862F787397FEFEF04D7E72EB5E7AAC15D14D9EEB5E15B6F809FF21E17EE434B309CA74C1899048FB02F48160E4DEBFA4B041A27E80D28FB03DA54E540EC5286769380D14ED8173012DE6207A51FA2B97F65E0C048BAAD1257B683293129095B1F01730504ADA4E7948C24C5A7E0B998C7D2780851BD2E7F74D61DB3FE3299C1FABB12B01D87D0B7EAF53A9B143A8A280806974D961A7EBD2F9A083FD44A5ADF4CDC2F39DABFF105C2857D3C48D68E625AE012ABE5E733A81A4E58EB4DF30A1468212EF5DD81FE0987C361E186E432D786ABB33B31E4CEC05196D899A2BDD889D0D6B1784F94AAECA633F6D9788764B475D9C6ECD8DA695538B25099A416B60CB196E2261037F054E60FE0023F4529DB417F718DD1B9A24B2C5A6A18FC1E39F426F0D227B69A53718876FD394CE85641840B9007CAE0F3696FDE8DD78E4018DE3DEDB2036086678F086B9C9DB6EDC7C98C1A4F72D60D2249F8862BD9A0DC6A1EF140A9106C206E2FB8C27228F50865C4459335329053CD3DB85E18BB6BAA7B093F2220CEFB22CDF7B0CAA5C418C6655D85644E767FDCCCC112291D9698BC6D2C8B67B510CC51857C38B1063DE1A7866C06B4254181DFE1A383FF4E999A39D91E4466F8E4760A06C4F793F2970FAC977BE321B069FB7BCCDF8640080E410AF8D3E7B26ACC894C10463F19253FEB3A7D713192828B9DEE
0D0120FAAF298F5516760F5B23A318D3698BA11F9C05352FAAB7901E5EC3E8BEFD470BFE4E4061DBBE720E5638DEDD49AF1AE4EDAC47B0703EF393B979C34C78CB05443CB3C085766B09B28E6FFE94463FD741D754A20D2C33BA070CA24F29D71CAC675A2C96FF8EEB677386B573B9BCBF40349134FE7BE7335A3CF95716DC4AE4597B987A81FA249F2D8A17EFFA5831CCC67AA8211C71FE3792DC9CA58DC782A7980883DE09D415A98975F4A58DE978BF97AC538A6D4D1A2FEC5FFCAAECB10A460C6C708AFE9888B73190DD3A39587AC9D721546EB406E9FCF02604A8EC8F047C44DF516B51568C5B6633F94E24C9CD5F16B2501E3311626AB2945CD8FCAB3790626DBB177442F145CB7EC725E114F2F5A5645667BEFDE759760BA74F4366F17C137AD1EF9872AE4F7D1703A4B5ED9FEA2591A93EDBAB4BF74AF7DD66711E54C461054C8BEDF750EC323483D9669BF854540792DF7150DE3C9474C57302DD33C204785D49F7AADC562742E184F065D9A568E888EFD66B6385675ECC80C2F76CCA1DE720CC1D0EA62F9D0CEEFCB1045CE44FE0D84F2DC0692CB4A2C8E926B6A5F82D3D314AEFA10B247838B8FD418390ADA736CD261161380F2F94A1B38C1A550CC1B28CBD7BBE97D9538FED82C787B23093A1DAB50520ACEF026C58CDF77971C55936A20612D83B2C9858DEE78ACB3EF55FDC2FBDE3BB06E32E614344AC05CFE00A8AC3550BBDBEC20E9B8CFE8D1E4E4B3778990E7ADB2614338F9EF3C6C3CE5EF4695FDA3612F1AE0AD51E402E756C4E17147617DF5D6935E97B8253E51ADA34723F21243EE540ABA3A6DC7B1B1CC19F2AB78FD7EFABFC8BBD17C437C77BE8BFF9635E145613DB20E73DDB9FCEA28594532EB8EEDF44B540535B8683E1FAC1E1100A780FC7C7C99509E597B5CA600BFDE8423479CD0626DEB8F3FB34C02BB202BC041AE263B47BBFE196861D08F1123FB5D2AF3AE65090347157914D3A5E48E1E6B1D0FCE88DC0485C6EC90406817EAE8CA5C85D5326A044DB32E6FDF3979F4C16C49AA151662FEA7BE8E9A4CCAE3C31B2E07509BC0326556A4942FBCC7315E249550D38A6473FB5D18CEFF5EB1720047A11488EBD053CF71A53A12735C66FDFD9A305C902432A19951B967DD4412E051ED005A2D4AC774530AA5233A27EB9B21A7FEEDD7B240B21DB35E3ED92CDC3D5A29D7E1622DDB3D5EA8FEB5BDD3FD4E139CEFB2C1E190EE12CE70CB6D23128A41E48C44661EBBC1B4E92C32CAAE6BB7DAE6DC6B0FC0F17F125DD928E4F4482FAB5E5D1B59A7236294BBC8A86B5AE05409E625CFC62719AB1C3A4DA6A24E592210898949F45A535C7D5F2CE1357C205DC6B2D57A780CDD02E6DC1B61DDDF509403ADE20EE73A302435FD9D43C639161BDB16A7E293FB008560825DB887347B428781806B6C658BF8D759238915A1FB4
0D8BCFCD7CF998B81C955EA9E05B65E4983275E3D074BA11E1778D0F99C3A7B7A852F6FE5A7B44967ACD7DF74AF5DE0D535FABE65E712D26C632DEE8D05F1C0B1DA0C084A7DC96B49133D3A5DF5536DFE4C7852602DA35BAB2830E6A8305919E98DE38F696E4CC933BACC70A7F9C1F6E8D98DF325653C763DD902F4B496B807AF35340D77AD2266E5012AD4838B21B949F38169A3D6033B174E189819556DCAB44DA296F75F1189DB8CFAA4832E3731C8DE48D365EBB13D0240565FFC3B023EF1CAE1914AC6707842337A5B1F4C953343FAD9E807DB5C3809B6519C0DE0ECE7981D1BEF9E9D7679B465616D5F37F5D6751B4FF91B4161971D96620B4C174A53E35D56879ACA90121DE165D8D10DE87D508C8A3B8F80ECBA1A1E8AB91363685EF95E30EB1C6BBD3A63FE41A77C1472D41B3517C0F868CF3ED4D31C3348DD62172AFC42540D60D081870911A8830BB0E6BE4753EC41F4E59AC34426EF0F7810123FCF6645FBAAF4A3F5037332BECB0035B744E9C22B3C713AB5049C8B11CE637E08C1AB111B573CCCD5E3FCEE314DC3140415E6B0533BB2613F53A7F3EDE4B5FE1C85C556BCE886FD50DCEB250A9AB4D2C5C6499FC4D74C9962D9E8ACE9F53C113A08ECADA43EB21C64AB3281B66FFE948FA7221CBA93964B3A34EABEF3E1379D88DEA5BF2544E579F606ABF547B91C63AAE78EF635184F42528AB5CE8842A3ACBF6455414089AA5374E7B34C832DA82D1D1A9CDCD0ACAC4972C66641C6E1532D42EAB844457E2B4F656886F9EC6B55BED08A96512439A2B450B1B59FD3C7B875857979365597310C54E14C20B6D9BD3845669433E1130280B3BC0572AFF40FD14F548B357F617A02D29DA772D532D293DF245173AEC54F5D0E0C7D0EE4350BCF0DF63FCF12AB50E0E3E8B89E69BF90158A9698E7792D2AC0599FC2284FC7AB4FF3CC9ABD8C5C91FD853190A5F2771D2FDD784F3FA25BE71FF296418E877B539CA76EF3A528A769A276CF4B35972B4E5AA9DA8FF6DEE7FB830EBCFC2D4CB04150ADA05F8923CC6906978D473A3D3DBD252AE1745F158DC942D915920CF7ABD8032EA8C52EA6B3F50C17DB3BB397D7FE52608418E501B6AD674548D929EDCC7DF620BE31652FA995CDECFCBAC619BCF09FE6AE68ACC8FA0B1C22F83209A109402D59A7B5FC5993803075432993C282A9986EC18A013F555561AD7769F888F685E9C2D1876CF91D2056A8FA71DBB05ED358803EDBAC965B1DF96BC4A51E4EC3D85B0D3DDEBF237C4DCF6527430AFE954E64D297E6DD86830B9D61B068C33C106134B82B01B02CC4184D56E6AFB8D878A7707D039310863A73B9469AF24062B5ABC3ACCE26B84ECE49A85CFB3F290DE7242CE950CD1D662D5E026E4385FC563AFBD2ABAD764A19C7A422FE8DFE0ED745CD8A24FD1803828EAD1205191DBA0EA96FD3F
893F6056044785349CD6A6731F6B8A7B1D6BDF2DDAB59696451F4382DB9773AE99AF8EBD843970EAAE95A2253B8044960E315408F5D801F8E872B7A9886E235FEF65968829E74F3C9614E54D9201008AAB62299BBD6F2BF37EB742BA3700F4483BFDD130FB7AC132263F9F29E4B5371FC3939F2855385E639932B512578FE5DCD698A349CD35837E028DB9B6DB12A4598348574123F5254BC9EC8D9895E1765BC23E58B6A222E1EDD7B70A464D9C0022011B4E5D5ADCA00AD1216B9B6E348C631AC66B3A26D9ED27B82F18597A77A57060576537D8494A253F83AC7A31283E4739BF9A5BF1FA4F27A2BF1F36A4739A705B44DD76A46C1828204D70E2DF2C780964AA31A0E0CEB1051017FE94B63FB8F02898171153B3E79F9AB2059C988314C7525C58D7A378C095B7A4BED0123D91445BD3F1E76586969E1FCA747686BF8B582503D1AB7B9B6E2876E5FA67A8C0057839FD58DB5A324863F9EE97F38CC1B085A077CCAF643712048C91CC8FB128BDC6FD2B0C098D99C3F0AC8459A8164E940098589C3E9AB9DBCAE268F22CD25C0C6BD33895D43F069DA49E69B6253F7DC5283E26C52A9864C4285313E792F9342FAD305E9819A39A7A1EA6FBEF7505BF8507D02FBE618880AE166CECE3A196057BDE328D9A2BB6DC9080941D8151C3CA825BD05338323624A5E150A2A796BFCD7FD0191C3C7DEEE8D10AB166F56D6D0F946B4225BA8D545B076E36205E3C70E2B11680961FED117FFCD76D25726121C690D8DA2327124FEA1BB407497AEA94510DAB2DAFAFE4131E280FECA57C5C923ABEB7848A49F2A08A16DC2381DA28E9E8E50946497CAECCAB23EBC918952E65A2EA40ADBA4B53CCFEC065CC93D186050E7C3848C17227A381E9B8B1949BB9AAF0F306E78D532C9EFD6B02AFD8FA04AEA52CF4B48E0CDB24A6A5B4D228875C89C8EA658AAEBB975247A08AA5DC3D2529F6DB5D0191C15EAB0DC962722D2632BEBC5CE164BC23BB186A17322584C4369D458A8634FADCB526352EB32F88F642461D265A82A014D3C8FEB595B2E7CE56D82D909505579081D17359BEC42D41B2D6043E4C5E59098F13277E14DB88B98C7E9C444F662925F5B4AE57E4F3D7CF9067E236CAE5477ECE9EFBA1CC1369E15580E338C78CD791C542BCDA5463BBB89435D2FE557DE918ECB2CB75C3783ADB30052CFC760539E1F3EEC06800797FF766FEFCA0E97F646DF9951BF0EB70CAD7475125219D4C77349741A72F834983F230BDDC0AAB2C0AB681BAA97F420553EBB565CCB9C94EABB2D32F373D32924B413A4E8991E0325F01EA0BDDC92163AEFB637FE27524053391A9AEF248CA0E233DB1AC330FE46DED8E67086655E9D870790DC824D52C5D183CC79B6FB72A493EFCF545574A03E1259ED9897A3C5B6F67684F55F22448666D5CB01B8A02C9D260D79102691AF2

0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark end
%APLT1End
%RBIEndFontSubset
/HelveticaNeue cguidfix
/F1.1/HelveticaNeue renmfont
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { { 1.8008  exp } bind  exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
1 J
1 j
0.60000002 i
/Cs1 SC
0 0 0 sc
q
0 0 541 256 rc
1 0 0 -1 -210 384 cm
219 151 m
615.96484 151 l
S
220 226.67822 m
616.96484 226.67822 l
S
220 292.80469 m
616.96484 292.80469 l
S
305 138.29883 m
305 163.92773 l
305.77344 164.70117 l
S
306 213.32764 m
306 238.95654 l
306.77344 239.72998 l
S
429 280.80469 m
429 306.43359 l
429.77344 307.20703 l
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 9.5 211.14941 cm
/F1.1[ 14 0 0 -14 0 0]sf
-3.892 4.8040009 m
(!)s
1 0 0 -1 95.5 211.14941 cm
-15.568 4.8040009 m
("##!)[ 7.784000 7.784000 7.784000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -210 384 cm
615.96484 138.29883 m
615.96484 163.92773 l
616.73828 164.70117 l
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 406.46484 211.14941 cm
-19.459999 4.8040009 m
("$!"!)[ 7.784000 7.784000 7.784000 7.784000 0.000000 ] xS
1 0 0 -1 95.5 132.25854 cm
-15.568 4.8040009 m
("##!)[ 7.784000 7.784000 7.784000 0.000000 ] xS
1 0 0 -1 219.5 63.292969 cm
-15.568 4.8040009 m
(#%&!)[ 7.784000 7.784000 7.784000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -210 384 cm
365 213.32764 m
365 238.95654 l
365.77344 239.72998 l
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 155.5 132.25854 cm
-15.568 4.8040009 m
(&''!)[ 7.784000 7.784000 7.784000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -210 384 cm
365 280.80469 m
365 306.43359 l
365.77344 307.20703 l
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 155.5 63.292969 cm
-15.568 4.8040009 m
(&''!)[ 7.784000 7.784000 7.784000 0.000000 ] xS
1 0 0 -1 10.5 135.69531 cm
-3.892 4.8040009 m
(!)s
1 0 0 -1 9.5 67.695312 cm
-3.892 4.8040009 m
(!)s
1 0 0 -1 52.5 241.5 cm
-24.115 4.8040009 m
(\(\)*+,*\)+)[ 6.482000 7.518000 7.000000 4.410000 3.892000 7.000000 7.518000 0.000000 ] xS
1 0 0 -1 243 241.5 cm
-35.784 4.8040009 m
(\(-./0/01,*\)+)[ 6.748000 4.662000 7.518000 3.108000 7.784000 3.108000 7.784000 8.036000 3.892000 7.000000 7.518000 0.000000 ] xS
1 0 0 -1 83 98.695312 cm
-35.784 4.8040009 m
(\(-./0/01,*\)+)[ 6.748000 4.662000 7.518000 3.108000 7.784000 3.108000 7.784000 8.036000 3.892000 7.000000 7.518000 0.000000 ] xS
1 0 0 -1 281.48242 165.82178 cm
-35.784 4.8040009 m
(\(-./0/01,*\)+)[ 6.748000 4.662000 7.518000 3.108000 7.784000 3.108000 7.784000 8.036000 3.892000 7.000000 7.518000 0.000000 ] xS
1 0 0 -1 54 165.82178 cm
-35.784 4.8040009 m
(\(-./0/01,*\)+)[ 6.748000 4.662000 7.518000 3.108000 7.784000 3.108000 7.784000 8.036000 3.892000 7.000000 7.518000 0.000000 ] xS
1 0 0 -1 313.48242 98.695312 cm
-35.784 4.8040009 m
(\(-./0/01,*\)+)[ 6.748000 4.662000 7.518000 3.108000 7.784000 3.108000 7.784000 8.036000 3.892000 7.000000 7.518000 0.000000 ] xS
1 0 0 -1 125.5 165.82178 cm
-24.115 4.8040009 m
(\(\)*+,*\)+)[ 6.482000 7.518000 7.000000 4.410000 3.892000 7.000000 7.518000 0.000000 ] xS
1 0 0 -1 187.5 98.695312 cm
-24.115 4.8040009 m
(\(\)*+,*\)+)[ 6.482000 7.518000 7.000000 4.410000 3.892000 7.000000 7.518000 0.000000 ] xS
0.60000002 i
/Cs1 SC
0 0 0 sc
1 0 0 -1 -210 384 cm
616.96484 213.32764 m
616.96484 238.95654 l
617.73828 239.72998 l
S
616.96484 279.4541 m
616.96484 305.08301 l
617.73828 305.85645 l
S
219 138.29883 m
219 163.92773 l
219.77344 164.70117 l
S
220 213.32764 m
220 238.95654 l
220.77344 239.72998 l
S
220 279.4541 m
220 305.08301 l
220.77344 305.85645 l
S
0 i
CM
201.76776 46.463078 m
202.74408 45.486767 202.74408 43.903858 201.76776 42.927547 c
200.79146 41.951233 199.20854 41.951233 198.23224 42.927547 c
197.25592 43.903858 197.25592 45.486767 198.23224 46.463078 c
199.20854 47.439392 200.79146 47.439392 201.76776 46.463078 c
f
0.60000002 i
1 0 0 -1 -210 384 cm
411.76776 337.53693 m
412.74408 338.51324 412.74408 340.09613 411.76776 341.07245 c
410.79144 342.04877 409.20856 342.04877 408.23224 341.07245 c
407.25592 340.09613 407.25592 338.51324 408.23224 337.53693 c
409.20856 336.56061 410.79144 336.56061 411.76776 337.53693 c
S
0 i
CM
201.76776 18.761906 m
202.74408 17.785595 202.74408 16.202686 201.76776 15.226376 c
200.79146 14.250061 199.20854 14.250061 198.23224 15.226376 c
197.25592 16.202686 197.25592 17.785595 198.23224 18.761906 c
199.20854 19.73822 200.79146 19.73822 201.76776 18.761906 c
f
0.60000002 i
1 0 0 -1 -210 384 cm
411.76776 365.2381 m
412.74408 366.21442 412.74408 367.7973 411.76776 368.77362 c
410.79144 369.74994 409.20856 369.74994 408.23224 368.77362 c
407.25592 367.7973 407.25592 366.21442 408.23224 365.2381 c
409.20856 364.26178 410.79144 364.26178 411.76776 365.2381 c
S
0 i
CM
201.76776 32.612492 m
202.74408 31.636181 202.74408 30.053272 201.76776 29.076962 c
200.79146 28.100647 199.20854 28.100647 198.23224 29.076962 c
197.25592 30.053272 197.25592 31.636181 198.23224 32.612492 c
199.20854 33.588806 200.79146 33.588806 201.76776 32.612492 c
f
0.60000002 i
1 0 0 -1 -210 384 cm
411.76776 351.38751 m
412.74408 352.36383 412.74408 353.94672 411.76776 354.92303 c
410.79144 355.89935 409.20856 355.89935 408.23224 354.92303 c
407.25592 353.94672 407.25592 352.36383 408.23224 351.38751 c
409.20856 350.41119 410.79144 350.41119 411.76776 351.38751 c
S
0 i
CM
457.50989 254.75122 m
457.78366 254.75122 465.72379 259.92902 466.27133 223.03699 c
466.81894 186.14476 465.72375 136.95522 467.36655 131.77742 c
469.00934 126.59949 470.9259 127.89388 470.9259 127.89388 c
470.9259 127.89388 466.28976 126.83198 465.72375 135.66071 c
465.15771 144.48892 465.4671 209.35152 464.09808 233.94624 c
462.7291 258.54111 457.23605 254.75122 457.50989 254.75122 c
h
457.50989 254.75122 m
f
0.5 w
0.60000002 i
1 0 0 -1 -210 384 cm
667.50989 129.24878 m
667.78369 129.24878 675.72375 124.07098 676.2713 160.96301 c
676.81891 197.85524 675.72375 247.04478 677.36658 252.22258 c
679.00934 257.40051 680.9259 256.10611 680.9259 256.10611 c
680.9259 256.10611 676.28973 257.16803 675.72375 248.33929 c
675.15771 239.51108 675.4671 174.64848 674.09808 150.05376 c
672.72906 125.45889 667.23608 129.24878 667.50989 129.24878 c
h
667.50989 129.24878 m
S
0 i
CM
457.51089 0.74877357 m
457.78467 0.74877357 465.72479 -4.4290257 466.27234 32.463017 c
466.81992 69.355247 465.72476 118.54478 467.36755 123.72258 c
469.01031 128.90051 470.92691 127.60612 470.92691 127.60612 c
470.92691 127.60612 466.29077 128.66801 465.72476 119.83929 c
465.15872 111.01108 465.46808 46.148487 464.09909 21.553753 c
462.7301 -3.0411105 457.23706 0.74877357 457.51089 0.74877357 c
h
457.51089 0.74877357 m
f
0.60000002 i
1 0 0 -1 -210 384 cm
667.51093 383.25122 m
667.78467 383.25122 675.72479 388.42902 676.27234 351.53699 c
676.81995 314.64474 675.72473 265.45523 677.36755 260.2774 c
679.01031 255.09949 680.92688 256.39389 680.92688 256.39389 c
680.92688 256.39389 676.29077 255.33199 675.72473 264.16071 c
675.15869 272.98892 675.46808 337.8515 674.09912 362.44626 c
672.7301 387.04111 667.23706 383.25122 667.51093 383.25122 c
h
667.51093 383.25122 m
S
/Cs2 SC
0 sc
0 i
1 0 0 -1 510.5 127.75 cm
/F1.1[ 16 0 0 -16 0 0]sf
-25.488001 5.776001 m
(""23456)[ 8.896000 8.896000 6.224000 4.736000 9.184000 3.552000 0.000000 ] xS
1 0 0 -1 406.46484 67.695312 cm
/F1.1[ 14 0 0 -14 0 0]sf
-19.459999 4.8040009 m
("$!"!)[ 7.784000 7.784000 7.784000 7.784000 0.000000 ] xS
1 0 0 -1 406.46484 132.25854 cm
-19.459999 4.8040009 m
("$!"!)[ 7.784000 7.784000 7.784000 7.784000 0.000000 ] xS
ep
end
%%Trailer
%%EOF
